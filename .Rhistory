library(dplyr)
install.packages("dplye")
install.packages("dplyr")
vignette("introduction", package = "dplyr")
NOAAdata.rel$PROPDMGEXP
levels(NOAAdata.rel$PROPDMGEXP)
levels(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$CROPDMGEXP <- toupper(NOAAdata.rel$CROPDMGEXP)
levels(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$CROPDMGEXP <- as.factor(toupper(NOAAdata.rel$CROPDMGEXP))
NOAAdata.rel$PROPDMGEXP <- as.factor(toupper(NOAAdata.rel$PROPDMGEXP))
levels(NOAAdata.rel$CROPDMGEXP)
levels(NOAAdata.rel$PROPDMGEXP)
levels(NOAAdata$CROPDMGEXP)
NOAAdata.rel.filter <- NOAAdata.rel[NOAAdata.rel$CROPDMGEXP %in% c("H","K","M","B"),]
NOAAdata.rel.filter
NOAAdata.rel.filter <- NOAAdata.rel[NOAAdata.rel$CROPDMGEXP %in% c("H","K","M","B") & NOAAdata.rel$PROPDMGEXP %in% c("H","K","M","B"),]
NOAAdata.rel.filter$PROPDMGEXP
NOAAdata.rel$CROPDMGEXP[NOAAdata.rel$CROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$PROPDMGEXP[NOAAdata.rel$PROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
levels(NOAAdata.rel$PROPDMGEXP)
levels(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$CROPDMGEXP[NOAAdata.rel$CROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$PROPDMGEXP[NOAAdata.rel$PROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
levels(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$CROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?")
sum(NOAAdata.rel$CROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?"))
NOAAdata.rel$CROPDMGEXP
which(NOAAdata.rel$CROPDMGEXP %in% c("1","2","3","4","5","6","7","8","-"," ","?"))
which(NOAAdata.rel$CROPDMGEXP %in% c("?"))
which(NOAAdata.rel$CROPDMGEXP=="?")
NOAAdata.rel$CROPDMGEXP=="?"
sum(NOAAdata.rel$CROPDMGEXP=="?")
NOAAdata.rel$CROPDMGEXP=="?"
as.character(NOAAdata.rel$CROPDMGEXP) %in% c("1","2","3","4","5","6","7","8","-"," ","?")
sum(as.character(NOAAdata.rel$CROPDMGEXP) %in% c("1","2","3","4","5","6","7","8","-"," ","?"))
as.character(NOAAdata.rel$PROPDMGEXP)
levels(NOAAdata.rel$CROPDMG)
levels(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$PROPDMGEXP
NOAAdata.rel$CROPDMGEXP[as.character(NOAAdata.rel$CROPDMGEXP) %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$PROPDMGEXP[as.character(NOAAdata.rel$PROPDMGEXP) %in% c("1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$]
NOAAdata.rel$PROPDMGEXP
NOAAdata.rel$CROPDMGEXP
uni'(NOAAdata.rel$CROPDMGEXP
unique(NOAAdata.rel$CROPDMGEXP)
NOAAdata.rel$CROPDMGEXP[as.character(NOAAdata.rel$CROPDMGEXP) %in% c("0","1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$PROPDMGEXP[as.character(NOAAdata.rel$PROPDMGEXP) %in% c("0","1","2","3","4","5","6","7","8","-"," ","?")] <- NA
NOAAdata.rel$CROPDMGEXP == "B"
sum(NOAAdata.rel$CROPDMGEXP == "B")
sum(NOAAdata.rel$CROPDMGEXP == "B",na.rm = TRUE)
sum(NOAAdata.rel$CROPDMGEXP == "K",na.rm = TRUE)
10^3
10^6
100000
1000000
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMG == "B"] <- NOAAdata.rel$PROPDMG*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMG == "M"] <- NOAAdata.rel$PROPDMG*10^6
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMG == "K"] <- NOAAdata.rel$PROPDMG*1000
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMG == "H"] <- NOAAdata.rel$PROPDMG*100
NOAAdata.rel$PROPDMG
NOAAdata$PROPDMG
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"] <- NOAAdata.rel$PROPDMG*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"] <- NOAAdata.rel$PROPDMG*10^6
NOAAdata <- read.csv("Downloads/repdata_data_StormData.csv")
NOAAdata.rel <- NOAAdata[,c("EVTYPE", "PROPDMG", "PROPDMGEXP", "FATALITIES","INJURIES", "CROPDMG", "CROPDMGEXP")]
NOAAdata.rel$CROPDMGEXP <- as.factor(toupper(NOAAdata.rel$CROPDMGEXP))
NOAAdata.rel$PROPDMGEXP <- as.factor(toupper(NOAAdata.rel$PROPDMGEXP))
NOAAdata.rel$CROPDMG[as.character(NOAAdata.rel$CROPDMGEXP) %in% c("0","1","2","3","4","5","6","7","8","-"," ","?")] <- 0
NOAAdata.rel$PROPDMG[as.character(NOAAdata.rel$PROPDMGEXP) %in% c("0","1","2","3","4","5","6","7","8","-"," ","?")] <- 0
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"] <- NOAAdata.rel$PROPDMG*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"] <- NOAAdata.rel$PROPDMG*10^6
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"]*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"]*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"]*10^6
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "K"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "K"]*1000
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "H"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "H"]*100
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "B"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "B"]*10^9
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "M"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "M"]*10^6
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "K"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "K"]*1000
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "H"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "H"]*100
NOAAdata.rel$PROPDMG
library(dplyr)
NOAAdata.rel %.%
group_by(EVTYPE)
summarise(Fatalities = sum(FATALITES,na.rm = TRUE),
Injuries = sum(INJURIES))
NOAAdata.rel %>%
group_by(EVTYPE)
summarise(Fatalities = sum(FATALITES,na.rm = TRUE),
Injuries = sum(INJURIES))
NOAAdata.rel %>%
group_by(EVTYPE)
summarise(Fatalities = sum(FATALITES,na.rm = TRUE))
NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITES,na.rm = TRUE),
Injuries = sum(INJURIES))
NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES))
Some <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES))
Some$EVTYPE
Some$Fatalities
Some$Injuries
Some <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES)) %>%
arrange(FATALITIES)
Some <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES)) %>%
arrange(Fatalities)
some
Some
head(Some)
tail(Some)
Some <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES)) %>%
arrange(desc(Fatalities))
head(Some)
Some <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES)) %>%
arrange(desc(Fatalities),desc(Injuries))
head(Some)
library(reshape2)
melt(Some,id.vars = c("Fatalities","Injuries"))
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES)) %>%
arrange(desc(Fatalities),desc(Injuries))
finalNOAA <- melt(NOAAdata.rel.arranged,id.vars = c("Fatalities","Injuries"))
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES,na.rm = TRUE),
Injuries = sum(INJURIES),cropDamage = sum(CROPDMG),propertyDamage <- sum(PROPDMG)) %>%
arrange(desc(Fatalities),desc(Injuries))
NOAAdata.rel.arranged
NOAAdata.rel.arranged
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),cropDamage = sum(CROPDMG),propertyDamage = sum(PROPDMG)) %>%
arrange(desc(Fatalities),desc(Injuries))
NOAAdata.rel.arranged
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),TotalDamage = sum(CROPDMG)+ sum(PROPDMG)) %>%
arrange(desc(Fatalities),desc(Injuries))
NOAAdata.rel.arranged
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),TotalDamage = sum(CROPDMG)+ sum(PROPDMG))
noaaFatal <- arrange(NOAAdata.rel.arranged,"Fatalities")
NOAAdata.rel.arranged
noaaFatal <- arrange(NOAAdata.rel.arranged,"Fatalities")
NOAAdata.rel.arranged$Fatalities
length(NOAAdata.rel.arranged)
length(NOAAdata.rel.arranged$EVTYPE)
length(NOAAdata.rel.arranged$Fatalities)
noaaFatal <- arrange(NOAAdata.rel.arranged,desc("Fatalities"))
noarrange(NOAAdata.rel.arranged,desc("Fatalities"))
arrange(NOAAdata.rel.arranged,desc("Fatalities"))
arrange(NOAAdata.rel.arranged,desc("Fatalities"))
arrange(NOAAdata.rel.arranged,desc(Fatalities))
noaaFatal <- arrange(NOAAdata.rel.arranged,Fatalities)
noaaFatal <- melt(NOAAdata.rel.arranged,id.vars = c("Fatalities","Injuries"))
noaaFatal
head(noaaFatal)
noaaFatal <- NOAAdata.rel.arranged %>%
filter(Fatalities,EVTYPE,Injuries) %>%
arrange(desc(Fatalities))
noaaFatal <- NOAAdata.rel.arranged %>%
filter(Fatalities,EVTYPE,Injuries) #%>%
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) #%>%
arrange(desc(Fatalities))
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) #%>%
arrange(desc(Fatalities))
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) %>%
arrange(desc(Fatalities))
noaaFatal
noaaFatal <- melt(noaaFatal,id.vars = c("Fatalities","Injuries"))
ggplot(noaaFatal,aes(x = EVTYPE,y = Fatalities))+geom_bar()
noaaFatal$variable
ggplot(noaaFatal,aes(x = variable,y = Fatalities))+geom_bar()
ggplot(noaaFatal,aes(x = value,y = Fatalities))+geom_bar()
ggplot(noaaFatal,aes(x = value,y = Fatalities))+geom_bar(stat="identity")
ggplot(head(noaaFatal),aes(x = value,y = Fatalities))+geom_bar(stat="identity")
noaaFatal
noaaFatal <- melt(noaaFatal,id.vars = c("EVTYPE"))
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),TotalDamage = sum(CROPDMG)+ sum(PROPDMG))
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) %>%
arrange(desc(Fatalities))
noaaFatal <- melt(noaaFatal,id.vars = c("EVTYPE"))
head(noaaFatal)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity")# + facet_grid(variable)
head(noaaFatal)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(.~variable)
unique(noaaFatal$variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable.~)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(~.variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(~.variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(.~variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable~.)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet(variable~.)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet(variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value),facet=variable)+geom_bar(stat="identity")# + facet(variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet(variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet(value~variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(value~variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(.~variable)
unique(noaaFatal$variable)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(.~variable,scales = "free")
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable~.,scales = "free")
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_wrap(variable~.,scales = "free")
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_wrap(variable~.)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable~.)
library(dplyr)
library(ggplot2)
library(reshape2)
NOAAdata <- read.csv("Downloads/repdata_data_StormData.csv")
NOAAdata.rel <- NOAAdata[,c("EVTYPE", "PROPDMG", "PROPDMGEXP", "FATALITIES","INJURIES", "CROPDMG", "CROPDMGEXP")]
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "B"]*10^9
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "M"]*10^6
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "K"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "K"]*1000
NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "H"] <- NOAAdata.rel$PROPDMG[NOAAdata.rel$PROPDMGEXP == "H"]*100
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "B"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "B"]*10^9
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "M"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "M"]*10^6
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "K"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "K"]*1000
NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "H"] <- NOAAdata.rel$CROPDMG[NOAAdata.rel$CROPDMGEXP == "H"]*100
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),TotalDamage = sum(CROPDMG)+ sum(PROPDMG))
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) %>%
arrange(desc(Fatalities))
noaaFatal <- melt(noaaFatal,id.vars = c("EVTYPE"))
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value))+geom_bar(stat="identity") + facet_grid(variable~.)
ggplot(head(noaaFatal),aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") #+ facet_grid(variable~.)
qplot(head(noaaFatal),aes(x = EVTYPE,y = value),facets=variable)
qplot(head(noaaFatal),x = EVTYPE,y = value,facets=variable)
head(noaaFatal)
head(noaaFatal)$EVTYPE
dd<-head(noaaFatal)
dd
ggplot(dd,aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") #+ facet_grid(variable~.)
qplot(dd,x = EVTYPE,y = value,facets=variable)
qplot(dd,x = EVTYPE,y = value,facets=.~variable)
qplot(data=dd,x = EVTYPE,y = value,facets=.~variable)
qplot(data=dd,x = EVTYPE,y = value,facets=variable)
qplot(data=dd,x = EVTYPE,y = value,facets=value~variable)
noaaFatal$variable<-as.factor(noaaFatal$variable)
ggplot(dd,aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") #+ facet_grid(variable~.)
qplot(data=dd,x = EVTYPE,y = value,facets=value~variable)
qplot(data=dd,x = EVTYPE,y = value,facets=.~variable)
qplot(data=dd,x = EVTYPE,y = value,color=variable)
dd$EVTYPE
NOAAdata.rel.arranged <- NOAAdata.rel %>%
group_by(EVTYPE) %>%
summarise(Fatalities = sum(FATALITIES),
Injuries = sum(INJURIES),TotalDamage = sum(CROPDMG)+ sum(PROPDMG))
noaaFatal <- NOAAdata.rel.arranged %>%
select(Fatalities,EVTYPE,Injuries) %>%
arrange(desc(Fatalities))
noaaFatal<- head(noaaFatal)
noaaFatal <- melt(noaaFatal,id.vars = c("EVTYPE"))
ggplot(noaaFatal,aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") + facet_grid(variable~.)
ggplot(noaaFatal,aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") + facet_grid(~.variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value),facets=variable)+geom_bar(stat="identity") + facet_grid(.~variable)
noaaFatal
ggplot(noaaFatal,aes(x = EVTYPE,y = value),color=value)+geom_bar(stat="identity") + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value))+geom_bar(stat="identity",fill=value) + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value))+geom_bar(stat="identity",fill="value") + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value))+geom_bar(stat="identity",colour=value) + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,colour=value))+geom_bar(stat="identity") + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,colour=value))+geom_bar(stat="identity",fill=noaaFatal$value) + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value))+geom_bar(stat="identity",fill=EVTYPE) + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(palette="Set1")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=3)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=3)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=9)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=value))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=1)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=1)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=2)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq", palette=3)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer(type="seq")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer( palette=3)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)+ scale_colour_brewer( palette="Set1")
noaaDamages <- NOAAdata.rel.arranged %>%
select(TotalDamage,EVTYPE) %>%
arrange(desc(TotalDamage))
noaaDamages <- head(Damages)
noaaDamages <- head(noaaDamages)
ggplot(noaaDamages,aes(x = EVTYPE,y = TotalDamage,fill=EVTYPE))+geom_bar(stat="identity")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable)
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("")
ggplot(noaaDamages,aes(x = EVTYPE,y = TotalDamage,fill=EVTYPE))+geom_bar(stat="identity")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("") + title("blah")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("") + main("blah")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("") + ggtitle("blah")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("") + ggtitle("Highest Fatalities and Injuries caused by Disaster")
ggplot(noaaDamages,aes(x = EVTYPE,y = TotalDamage,fill=EVTYPE))+geom_bar(stat="identity") + xlab("Event Type") + ylab("") + ggtitle("Highest total property and crop damage caused by Disaster")
ggplot(noaaFatal,aes(x = EVTYPE,y = value,fill=EVTYPE))+geom_bar(stat="identity") + facet_grid(.~variable) + xlab("Event Type") + ylab("") + ggtitle("Highest Fatalities and Injuries caused by Disaster")
ggplot(noaaDamages,aes(x = EVTYPE,y = TotalDamage,fill=EVTYPE))+geom_bar(stat="identity") + xlab("Event Type") + ylab("") + ggtitle("Highest total property and crop damage caused by Disaster") + coord_flip()
trainingData<-read.csv("Personal/RRpro1//MLproject/pml-training.csv",na.strings=c("","NA","#DIV/0!"))
nzv <- nearZeroVar(trainingData)
library(caret)
library(dplyr)
library(plyr)
nzv <- nearZeroVar(trainingData)
filteredTrainingData <- trainingData[, -nzv]
dim(filteredTrainingData)
filteredTrainingData <- filteredTrainingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X,-amplitude_yaw_belt, -amplitude_yaw_dumbbell,- amplitude_yaw_forearm)
filteredTrainingData <- filteredTrainingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
dim(filteredTrainingData)
colSums(is.na(filteredTrainingData))
filteredTrainingData <- filteredTrainingData[,colSums(is.na(filteredTrainingData))==0]
dim(filteredTrainingData)
for(i in 1:(length(filteredTrainingData)-1))
filteredTrainingData[,i] <- as.numeric(filteredTrainingData[,i])
inTrain<-createDataPartition(y=filteredTrainingData$classe,p=0.6,list=FALSE)
training<-filteredTrainingData[inTrain,]
test<-filteredTrainingData[-inTrain,]
preProc <- preProcess(filteredTrainingData[,-length(filteredTrainingData)],method="pca",thresh = 0.99)
trainPC <- predict(preProc,filteredTrainingData[,-length(filteredTrainingData)])
inTrain<-createDataPartition(y=filteredTrainingData$classe,p=0.5,list=FALSE)
training<-filteredTrainingData[inTrain,]
test<-filteredTrainingData[-inTrain,]
preProc <- preProcess(training[,-length(training)],method="pca",thresh = 0.99)
trainPC <- predict(preProc,training[,-length(training)])
modelFit <- train(pmltraining$classe ~ .,method="rf",data=trainPC,trControl=trainControl(method="cv",number = 5),prox=TRUE)
preProc
preProc <- preProcess(training[,-length(training)],method="pca",thresh = 0.90)
trainPC <- predict(preProc,training[,-length(training)])
preProc
preProc <- preProcess(training[,-length(training)],method="pca",thresh = 0.90)
trainPC <- predict(preProc,training[,-length(training)])
modelFit <- train(filteredTrainingData$classe ~ .,method="rf",data=trainPC,trControl=trainControl(method="cv",number = 5),prox=TRUE)
modelFit <- train(training$classe ~ .,method="rf",data=trainPC,trControl=trainControl(method="cv",number = 5),prox=TRUE)
modelFit
save(modelFit,file = "Personal/RRpro1/MLproject/modelRFPCA.RData")
modelFit$finalModel
modFit.RF.PCA.predict<-predict(modelFit$finalModel,test, type="class")
modFit.RF.PCA.predict<-predict(modelFit$finalModel,test, type="class",preProc)
testPC <- predict(preProc,test[,-length(test)])
modFit.RF.PCA.predict<-predict(modelFit$finalModel,testPC, type="class")
confusionMatrix(modFit.RF.PCA.predict,test$classe)
testingData <- read.csv("Personal/RRpro1//MLproject/pml-testing.csv",na.strings=c("","NA","#DIV/0!"))
colSums(is.na(filteredTrainingData))==0
testingData <- testingData[,-nzv]
testingData <- testingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
testingData <- testingData[,colSums(is.na(filteredTrainingData))==0]
for(i in 1:(length(testingData)-1))
testingData[,i] <- as.numeric(testingData[,i])
testingData
dim(testingData)
testingData <- testingData[,colSums(is.na(filteredTrainingData))==0]
dim(testingData)
dim(filteredTrainingDataData)
dim(filteredTrainingData)
testingData <- read.csv("Personal/RRpro1//MLproject/pml-testing.csv",na.strings=c("","NA","#DIV/0!"))
nzv
dim(test)
dim(testingData)
testingData <- testingData[,-nzv]
dim(testingData)
trainingData<-read.csv("Personal/RRpro1//MLproject/pml-training.csv",na.strings=c("","NA","#DIV/0!"))
filteredTrainingData <- trainingData[, -nzv]
dim(filteredTrainingData)
filteredTrainingData <- filteredTrainingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
dim(filteredTrainingData)
testingData <- testingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
dim(testingData)
filteredTrainingData <- filteredTrainingData[,colSums(is.na(filteredTrainingData))==0]
testingData <- testingData[,colSums(is.na(filteredTrainingData))==0]
dim(testingData)
fim(filteredTrainingData)
dim(filteredTrainingData)
trainingData<-read.csv("Personal/RRpro1//MLproject/pml-training.csv",na.strings=c("","NA","#DIV/0!"))
testingData <- read.csv("Personal/RRpro1//MLproject/pml-testing.csv",na.strings=c("","NA","#DIV/0!"))
nzv <- nearZeroVar(trainingData)
filteredTrainingData <- trainingData[, -nzv]
testingData <- testingData[,-nzv]
dim(filteredTrainingData)
filteredTrainingData <- filteredTrainingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
filteredTrainingData1 <- filteredTrainingData[,colSums(is.na(filteredTrainingData))==0]
testingData <- testingData %>%
select(-user_name,-raw_timestamp_part_1,-raw_timestamp_part_2,-cvtd_timestamp,-num_window,-X)
testingData <- testingData[,colSums(is.na(filteredTrainingData))==0]
for(i in 1:(length(filteredTrainingData1)-1))
filteredTrainingData1[,i] <- as.numeric(filteredTrainingData1[,i])
for(i in 1:(length(testingData)-1))
testingData[,i] <- as.numeric(testingData[,i])
dim(testingData)
testNPC <- predict(preProc,testingData[,-length(testingData)])
modFit.RF.PCA.predict<-predict(modelFit$finalModel,testNPC, type="class")
confusionMatrix(modFit.RF.PCA.predict,testingData$classe)
testNPC
testingData$problem_id
modFit.RF.PCA.predict
source('~/Personal/RRpro1/MLproject/fileWrite.R')
pml_write_files(modFit.RF.PCA.predict)
install.packages('devtools')
install.packages('devtools')
install.packages("RCurl")
install.packages('devtools',dependencies = TRUE)
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='ahsanijaz', token='A6FDCFE217027FBA5090EC5F0A5266E9', secret='BwfLtpxDUPbQdmhHe7GwDE/uqrb/48VO2HmWaoZq')
library(shiny)
runApp()
library(shiny)
runApp("Personal/RRpro1//dataProductsAssignment")
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
Fruits$Sales
Fruits$Fruit
Fruits$Expenses
fit(Profit~Year + Location + Expenses + Salesd,data= Fruits)
fit(Profit~Year + Location + Expenses + Sales,data= Fruits)
fit<-lm(Profit~Year + Location + Expenses + Sales,data= Fruits)
fit
confint(fit, level=0.95)
fit<-lm(Profit~Year + Location + Fruit,data= Fruits)
fit
fit<-lm(Profit~ Location + Fruit,data= Fruits)
fit<-lm(Profit~ Location + Fruit + Date,data= Fruits)
fit
Fruits$Fruit
predict(fit)
Fruits$Profit
predict(fit,newdata = c(1,2,3,4))
predict(fit,newdata = c(1,1,0,0,1))
predict(fit,Fruits[1,])
predict(fit,Fruits[2,])
predict(fit,Fruits[3,])
Fruits$Profit
predict(fit,Fruits[2,])
predict(fit,Fruits[3,])
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
fit<-lm(Profit~ Location + Fruit + Year,data= Fruits)
fit
Fruits$Fruit
predict(fit,newdata= data.frame(LocationWest = ,FruitBananas = , FruitOranges = ,Year = ))
Fruits$Year
predict(fit,newdata= data.frame(LocationWest = 1,FruitBananas = 1, FruitOranges = 0,Year = "2010"))
predict(fit,newdata= data.frame(Location = "West",Fruit = "Apples",Year ="2010"))
predict(fit,newdata= data.frame(Location = "West",Fruit = "Apples",Year =2010))
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
shiny::runApp('Personal/RRpro1/dataProductsAssignment')
library(shinyapps)
deployApp("Personal/RRpro1//dataProductsAssignment")
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
